@model DataModel.PromotionCodeByProduct

@using (Html.BeginForm("PromotionCodeProductDetails", "Promotion", FormMethod.Post, new { data_parsley_validate = "", @class = "form-horizontal form-label-left", role = "form", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(x => x.PromotionCodeProductOID)
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <div class="d-sm-flex align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Promotion Code Product Config</h6>
            </div>
        </div>
        <br /><div class="text-danger" style="font-size:24px;color:red;font-weight:bold; text-align:center; padding-bottom:20px;" id="messe">@TempData["ErrorMessage"]</div>
        <div class="card-body">
            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Active <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    Disable  @Html.EditorFor(m => m.IsActive, new { required = "required" })  Enable
                </div>
            </div>
            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Campaign Name <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(x => x.CampaignName, new { required = "required", @class = "form-control form-control-sm col-lg-4" })
                </div>
            </div>
            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Detail <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextAreaFor(x => x.Detail, new { required = "required", @class = "form-control form-control-sm col-lg-4" })
                </div>
            </div>


            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Discount For Product <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.EditorFor(m => m.DiscountForProductFlight) : Flight
                    @Html.EditorFor(m => m.DiscountForProductHotel) : Hotel
                    @Html.EditorFor(m => m.DiscountForProductBundle) : Bundle
                    @Html.EditorFor(m => m.DiscountForProductTransfer) : Transfer
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Discount per
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.RadioButtonFor(m => m.Discountper, "3", new { @Text = "3", Checked = "checked" }) : Booking
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Discount Amount <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(x => x.DiscountAmount, new { required = "required", @class = "form-control form-control-sm col-lg-4", @type = "number", onkeydown = "return event.keyCode !== 69" })
                    (฿@Html.EditorFor(m => m.IsPercentDiscountAmount)%)
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Max Discount Amount <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(x => x.MaxAmount, new { required = "required", @class = "form-control form-control-sm col-lg-4", @type = "number", onkeydown = "return event.keyCode !== 69" }) <span>(0 = unlimit)</span>
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Start Campaign Date <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(m => m.StartCampaignDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "startCampaign", @readonly = "readonly" })
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Finish Campaign Date <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(m => m.FinishCampaignDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "finishCampaign", @readonly = "readonly" })
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Start Travel Date <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(m => m.StartTravelDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "startTravel", @readonly = "readonly" })
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Finish Travel Date <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(m => m.FinishTravelDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "finishTravel", @readonly = "readonly" })
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Code <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(x => x.Code, new { required = "required", @class = "form-control form-control-sm col-lg-4", @onkeypress = "return ValidateKey()" })
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Allotment <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(x => x.Allotment, new { required = "required", @class = "form-control form-control-sm col-lg-4", @type = "number", onkeydown = "return event.keyCode !== 69" })
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Used
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Model.UseProduct
                    @Html.HiddenFor(x => x.UseProduct)
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Remain
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @(Model.Allotment - Model.UseProduct)
                    @Html.HiddenFor(x => x.RemoveProduct)
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-6 col-sm-12">
                    Option For  <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.RadioButtonFor(x => x.AddProduct, "1", new { @Text = "1", Checked = "checked" }) : New Member
                    @Html.RadioButtonFor(x => x.AddProduct, "2", new { @Text = "2" }) : Member
                    @Html.RadioButtonFor(x => x.AddProduct, "3", new { @Text = "3" }) : Visitor
                </div>
            </div>

            <div class="row mb-1">
                <div class="col-lg-2 col-md-4 col-sm-4">
                    Domain Name <span class="asterisk">*</span>
                </div>
                <div class="col-lg-8 col-md-6 col-sm-12">
                    @Html.TextBoxFor(x => x.DomainName, new { required = "required", @class = "form-control form-control-sm col-lg-4", @onkeypress = "return ValidateKey5()" })
                </div>
            </div>

        </div>
        <div class="card-footer">
            <div class="text-right">
                <button type="submit" class="d-sm-inline-block btn btn-sm btn-primary shadow-sm" id="btn_Save">
                    <i class="fas fa-save fa-sm text-white-50"></i>
                    &nbsp;&nbsp;Save &nbsp;&nbsp;
                </button>
                @if (Model.PromotionCodeProductOID != new Guid())
                {
                    <button type="submit" class="d-sm-inline-block btn btn-sm btn-primaryblue shadow-sm" name="btn_Save" value="2">
                        <i class="fas fa-save fa-sm text-white-50"></i>
                        &nbsp;&nbsp;Save As&nbsp;&nbsp;
                    </button>
                }
                <button type="submit" id="btn_submit" style="display: none;"></button>
                <a href="@Url.Action("PromotionCodeByProductList")" class=" d-sm-inline-block btn btn-sm btn-warning shadow-sm">
                    <i class="fas fa-chevron-circle-left fa-sm text-white-50"></i>
                    Cancel
                </a>
            </div>
        </div>
    </div>
}


@section Scripts
{
    <script>
        $(document).ready(function () {
            //Date Picker
            var today = new Date();
            var defaultDepDateText = $('#startCampaign').val().split('/');
            var defaultDepDate = new Date(parseInt(defaultDepDateText[2]), parseInt(defaultDepDateText[1]) - 1, parseInt(defaultDepDateText[0]));
            console.log(defaultDepDate);
            var defaultRetDateText = $('#finishCampaign').val().split('/');
            var defaultRetDate = new Date(parseInt(defaultRetDateText[2]), parseInt(defaultRetDateText[1]) - 1, parseInt(defaultRetDateText[0]));

            var depDatepicker = $('#startCampaign').datepicker({
                minDate: today,
                maxDate: addDays(today, 365),
                language: 'en',
                autoClose: true,
                toggleSelected: false,
                onSelect: function onSelect(fd, date) {
                    if (retDatepicker) {
                        var retDate = retDatepicker.data('datepicker');
                        var ret = retDate.selectedDates[0];
                        //alert(ret);
                        if (date > ret) {
                            retDate.selectDate(addDays(date, 2));
                        }
                        retDate.update('minDate', date);
                    }
                }
            });
            var depDateDate = depDatepicker.data('datepicker');
            depDateDate.selectDate(defaultDepDate);
            var retDatepicker = $('#finishCampaign').datepicker({
                minDate: today,
                maxDate: addDays(today, 1095),
                language: 'en',
                autoClose: true,
                toggleSelected: false
            });
            var retDateDate = retDatepicker.data('datepicker');
            retDateDate.selectDate(defaultRetDate);




            var defaultDepDateTextTravel = $('#startTravel').val().split('/');
            var defaultDepDateTravel = new Date(parseInt(defaultDepDateTextTravel[2]), parseInt(defaultDepDateTextTravel[1]) - 1, parseInt(defaultDepDateTextTravel[0]));
            console.log(defaultDepDateTravel);
            var defaultRetDateTextTravel = $('#finishTravel').val().split('/');
            var defaultRetDateTravel = new Date(parseInt(defaultRetDateTextTravel[2]), parseInt(defaultRetDateTextTravel[1]) - 1, parseInt(defaultRetDateTextTravel[0]));

            var depDatepickerTravel = $('#startTravel').datepicker({
                minDate: today,
                maxDate: addDays(today, 365),
                language: 'en',
                autoClose: true,
                toggleSelected: false,
                onSelect: function onSelect(fd, date) {
                    if (retDatepickerTravel) {
                        var retDate = retDatepickerTravel.data('datepicker');
                        var ret = retDate.selectedDates[0];
                        //alert(retDate);
                        if (date > ret) {
                            retDate.selectDate(addDays(date, 2));
                        }
                        retDate.update('minDate', date);
                    }
                }
            });
            var depDateDateTravel = depDatepickerTravel.data('datepicker');
            depDateDateTravel.selectDate(defaultDepDateTravel);
            var retDatepickerTravel = $('#finishTravel').datepicker({
                minDate: today,
                maxDate: addDays(today, 365),
                language: 'en',
                autoClose: true,
                toggleSelected: false
            });
            var retDateDateTravel = retDatepickerTravel.data('datepicker');
            retDateDateTravel.selectDate(defaultRetDateTravel);
        });
        var addDays = function (date, days) {
            var result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;
        }

        function ValidateKey() {
            var key = window.event.keyCode;
            var allowed = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';

            return allowed.indexOf(String.fromCharCode(key)) != -1;
        }

        function ValidateKey1() {
            var key1 = window.event.keyCode;
            var allowed1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,*';

            return allowed1.indexOf(String.fromCharCode(key1)) != -1;
        }

        function ValidateKey2() {
            var key2 = window.event.keyCode;
            var allowed2 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,/*';

            return allowed2.indexOf(String.fromCharCode(key2)) != -1;
        }

        function ValidateKey3() {
            var key3 = window.event.keyCode;
            var allowed3 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,*';

            return allowed3.indexOf(String.fromCharCode(key3)) != -1;
        }

        function ValidateKey5() {
            var key2 = window.event.keyCode;
            var allowed2 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,/*.';

            return allowed2.indexOf(String.fromCharCode(key2)) != -1;
        }

                    //    $('#MixAirlineCodes').bind('keyup blur',function() {
                    //    $(this).val($(this).val().replace(/[^A-Za-z0-9]/g,''))
                    //});

    </script>
}