@model DataModel.MarkupFlight

@using (Html.BeginForm("Details", "MarkupFlight", FormMethod.Post, new { data_parsley_validate = "", @class = "form-horizontal form-label-left", role = "form", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(m => m.RobinhoodMarkupOID)

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <div class="d-sm-flex align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Markup Config</h6>
            </div>
        </div>
        <br /><div class="text-danger" style="font-size:24px;color:red;font-weight:bold; text-align:center; padding-bottom:20px;" id="messe">@TempData["ErrorMessage"]</div>
              <div class="card-body">
                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Active <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          Disable  @Html.EditorFor(m => m.IsActive, new { required = "required" })  Enable
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Airline Codes <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.AirlineCodes, new { required = "required", @class = "form-control form-control-sm col-lg-4", @placeholder = "YY - for all airlines", @maxlength = "2", @onkeypress = "return ValidateKey()" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Mix Airline Code
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.MixAirlineCodes, new { @class = "form-control form-control-sm col-lg-4", @maxlength = "2", @onkeypress = "return ValidateKey()" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          RBD <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.RBD, new { required = "required", @class = "form-control form-control-sm col-lg-4", @placeholder = "* for all RBDs", @onkeypress = "return ValidateKey3()" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Fare Basis <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.FareBasis, new { required = "required", @class = "form-control form-control-sm col-lg-4", @placeholder = "* for all Fare Basis", @onkeypress = "return ValidateKey2()" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Flight No. <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.FlightNo, new { required = "required", @class = "form-control form-control-sm col-lg-4", @placeholder = "* for all Flight No.", @onkeypress = "return ValidateKey1()" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Pax Type <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          ADT :  @Html.EditorFor(m => m.PaxTypeADT)
                          CHD :  @Html.EditorFor(m => m.PaxTypeCHD)
                          INF :  @Html.EditorFor(m => m.PaxTypeINF)
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Start Booking Date <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.StartBookingDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "startBooking", @readonly = "readonly" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Finish Booking Date <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.FinishBookingDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "finishBooking", @readonly = "readonly" })
                      </div>
                  </div>

                  @*<div class="row mb-1">
            <div class="col-lg-2 col-md-6 col-sm-12">
                Start Travel Date <span class="asterisk">*</span>
            </div>
            <div class="col-lg-8 col-md-6 col-sm-12">
                @Html.TextBoxFor(m => m.StartTravelDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "startTravel", @readonly = "readonly" })
            </div>
        </div>

        <div class="row mb-1">
            <div class="col-lg-2 col-md-6 col-sm-12">
                Finish Travel Date <span class="asterisk">*</span>
            </div>
            <div class="col-lg-8 col-md-6 col-sm-12">
                @Html.TextBoxFor(m => m.FinishTravelDate, "{0:dd/MM/yyyy}", new { required = "required", @class = "form-control form-control-sm col-lg-4", @id = "finishTravel", @readonly = "readonly" })
            </div>
        </div>*@


                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Zone From <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.ZoneFrom, new { required = "required", @class = "form-control form-control-sm col-lg-4", @placeholder = "Insert Country/City Code or * for all zones", @onkeypress = "return ValidateKey3()" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Zone To <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.ZoneTo, new { required = "required", @class = "form-control form-control-sm col-lg-4", @placeholder = "Insert Country/City Code or * for all zones", @onkeypress = "return ValidateKey3()" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Fare Type <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.RadioButtonFor(m => m.Type, "P", new { @Text = "P", Checked = "checked" }) : P
                          @Html.RadioButtonFor(m => m.Type, "A", new { @Text = "A" }) : A
                          @Html.RadioButtonFor(m => m.Type, "N", new { @Text = "N" }) : N
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Min Price <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.MinPrice, new { required = "required", @class = "form-control form-control-sm col-lg-4", @type = "number" })
                      </div>
                  </div>

                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-6 col-sm-12">
                          Max Price <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.MaxPrice, new { required = "required", @class = "form-control form-control-sm col-lg-4", @type = "number" })
                      </div>
                  </div>
                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-4 col-sm-12"></div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#6C248B;color:#FFF;">
                          Oneway
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#f6c23e;color:#FFF;">
                          Roundtrip
                      </div>
                  </div>
                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-4 col-sm-12">
                          LV1 Type<span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#E8E8E8;">
                          @Html.RadioButtonFor(m => m.LV1Type, "Mark Up", new { @Text = "Mark Up", Checked = "checked" }) : Mark Up
                          @Html.RadioButtonFor(m => m.LV1Type, "Discount", new { @Text = "Discount" }) : Discount
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#F1F3F4;">
                          @Html.RadioButtonFor(m => m.LV1TypeRT, "Mark Up", new { @Text = "Mark Up", Checked = "checked" }) : Mark Up
                          @Html.RadioButtonFor(m => m.LV1TypeRT, "Discount", new { @Text = "Discount" }) : Discount
                      </div>
                  </div>
                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-4 col-sm-12">
                          LV1 Value <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#E8E8E8;">
                          @Html.TextBoxFor(m => m.LV1Value, new { required = "required", @class = "form-control form-control-sm", style = "width: 200px;", step = "any", @type = "number" })
                          (฿@Html.EditorFor(m => m.IsPercentLV1)%)
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#F1F3F4;">
                          @Html.TextBoxFor(m => m.LV1ValueRT, new { required = "required", @class = "form-control form-control-sm", style = "width: 200px;", step = "any", @type = "number" })
                          (฿@Html.EditorFor(m => m.IsPercentLV1RT)%)
                      </div>
                  </div>
                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-4 col-sm-12">
                          LV2 Type <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#E8E8E8;">
                          @Html.RadioButtonFor(m => m.LV2Type, "Mark Up", new { @Text = "Mark Up", Checked = "checked" }) : Mark Up
                          @Html.RadioButtonFor(m => m.LV2Type, "Discount", new { @Text = "Discount" }) : Discount
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#F1F3F4;">
                          @Html.RadioButtonFor(m => m.LV2TypeRT, "Mark Up", new { @Text = "Mark Up", Checked = "checked" }) : Mark Up
                          @Html.RadioButtonFor(m => m.LV2TypeRT, "Discount", new { @Text = "Discount" }) : Discount
                      </div>
                  </div>
                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-4 col-sm-12">
                          LV2 Value <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#E8E8E8;">
                          @Html.TextBoxFor(m => m.LV2Value, new { required = "required", @class = "form-control form-control-sm", style = "width: 200px;", step = "any", @type = "number" })
                          (฿@Html.EditorFor(m => m.IsPercentLV2)%)
                      </div>
                      <div class="col-lg-2 col-md-4 col-sm-12" style="background-color:#F1F3F4;">
                          @Html.TextBoxFor(m => m.LV2ValueRT, new { required = "required", @class = "form-control form-control-sm", style = "width: 200px;", step = "any", @type = "number" })
                          (฿@Html.EditorFor(m => m.IsPercentLV2RT)%)
                      </div>
                  </div>


                  <div class="row mb-1">
                      <div class="col-lg-2 col-md-4 col-sm-4">
                          Domain Name <span class="asterisk">*</span>
                      </div>
                      <div class="col-lg-8 col-md-6 col-sm-12">
                          @Html.TextBoxFor(m => m.DomainName, new { required = "required", @class = "form-control form-control-sm col-lg-4", @onkeypress = "return ValidateKey5()" })
                      </div>
                  </div>

              </div>
        <div class="card-footer">
            <div class="text-right">

                <button type="submit" class="d-sm-inline-block btn btn-sm btn-primary shadow-sm" name="btn_Save" value="1">
                    <i class="fas fa-save fa-sm text-white-50"></i>
                    &nbsp;&nbsp;Save &nbsp;&nbsp;
                </button>

                @if (Model.RobinhoodMarkupOID != new Guid())
                {
                    <button type="submit" class="d-sm-inline-block btn btn-sm btn-primaryblue shadow-sm" name="btn_Save" value="2">
                        <i class="fas fa-save fa-sm text-white-50"></i>
                        &nbsp;&nbsp;Save As&nbsp;&nbsp;
                    </button>
                }
                <a href="@Url.Action("MarkupFlightList")" class=" d-sm-inline-block btn btn-sm btn-warning shadow-sm">
                    <i class="fas fa-chevron-circle-left fa-sm text-white-50"></i>
                    Cancel
                </a>
            </div>
        </div>
    </div>
}

@section Scripts
{
    <script>
        $(document).ready(function () {
            //Date Picker
            var today = new Date();
            var defaultDepDateText = $('#startBooking').val().split('/');
            var defaultDepDate = new Date(parseInt(defaultDepDateText[2]), parseInt(defaultDepDateText[1]) - 1, parseInt(defaultDepDateText[0]));
            console.log(defaultDepDate);
            var defaultRetDateText = $('#finishBooking').val().split('/');
            var defaultRetDate = new Date(parseInt(defaultRetDateText[2]), parseInt(defaultRetDateText[1]) - 1, parseInt(defaultRetDateText[0]));

            var depDatepicker = $('#startBooking').datepicker({
                minDate: today,
                //maxDate: addDays(today, 365),
                language: 'en',
                autoClose: true,
                toggleSelected: false,
                onSelect: function onSelect(fd, date) {
                    if (retDatepicker) {
                        var retDate = retDatepicker.data('datepicker');
                        var ret = retDate.selectedDates[0];
                        //alert(ret);
                        if (date > ret) {
                            retDate.selectDate(addDays(date, 2));
                        }
                        retDate.update('minDate', date);
                    }
                }
            });
            var depDateDate = depDatepicker.data('datepicker');
            depDateDate.selectDate(defaultDepDate);
            var retDatepicker = $('#finishBooking').datepicker({
                minDate: today,
                //maxDate: addDays(today, 365),
                language: 'en',
                autoClose: true,
                toggleSelected: false
            });
            var retDateDate = retDatepicker.data('datepicker');
            retDateDate.selectDate(defaultRetDate);




            var defaultDepDateTextTravel = $('#startTravel').val().split('/');
            var defaultDepDateTravel = new Date(parseInt(defaultDepDateTextTravel[2]), parseInt(defaultDepDateTextTravel[1]) - 1, parseInt(defaultDepDateTextTravel[0]));
            console.log(defaultDepDateTravel);
            var defaultRetDateTextTravel = $('#finishTravel').val().split('/');
            var defaultRetDateTravel = new Date(parseInt(defaultRetDateTextTravel[2]), parseInt(defaultRetDateTextTravel[1]) - 1, parseInt(defaultRetDateTextTravel[0]));

            var depDatepickerTravel = $('#startTravel').datepicker({
                minDate: today,
                //maxDate: addDays(today, 365),
                language: 'en',
                autoClose: true,
                toggleSelected: false,
                onSelect: function onSelect(fd, date) {
                    if (retDatepickerTravel) {
                        var retDate = retDatepickerTravel.data('datepicker');
                        var ret = retDate.selectedDates[0];
                        //alert(retDate);
                        if (date > ret) {
                            retDate.selectDate(addDays(date, 2));
                        }
                        retDate.update('minDate', date);
                    }
                }
            });
            var depDateDateTravel = depDatepickerTravel.data('datepicker');
            depDateDateTravel.selectDate(defaultDepDateTravel);
            var retDatepickerTravel = $('#finishTravel').datepicker({
                minDate: today,
                //maxDate: addDays(today, 365),
                language: 'en',
                autoClose: true,
                toggleSelected: false
            });
            var retDateDateTravel = retDatepickerTravel.data('datepicker');
            retDateDateTravel.selectDate(defaultRetDateTravel);

            

        });
        var addDays = function (date, days) {
            var result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;
        }

        function ValidateKey() {
            var key = window.event.keyCode;
            var allowed = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';

            return allowed.indexOf(String.fromCharCode(key)) != -1;
        }

        function ValidateKey1() {
            var key1 = window.event.keyCode;
            var allowed1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,*';

            return allowed1.indexOf(String.fromCharCode(key1)) != -1;
        }

        function ValidateKey2() {
            var key2 = window.event.keyCode;
            var allowed2 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,/*';

            return allowed2.indexOf(String.fromCharCode(key2)) != -1;
        }

        function ValidateKey3() {
            var key3 = window.event.keyCode;
            var allowed3 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,*';

            return allowed3.indexOf(String.fromCharCode(key3)) != -1;
        }

        function ValidateKey5() {
            var key2 = window.event.keyCode;
            var allowed2 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890,/*.';

            return allowed2.indexOf(String.fromCharCode(key2)) != -1;
        }

                //    $('#MixAirlineCodes').bind('keyup blur',function() {
                //    $(this).val($(this).val().replace(/[^A-Za-z0-9]/g,''))
        //});
        var keyLV1Value = false;
        var keyLV1ValueRT = false;
        $("#LV1Value").keyup(function () {               
            if ("@Model.LV1ValueRT"=="" && !keyLV1ValueRT) {
                $("#LV1ValueRT").val($("#LV1Value").val() * 2);
                keyLV1Value = true;
            }
        });
        $("#LV1ValueRT").keyup(function () {               
            if ("@Model.LV1Value"=="" && !keyLV1Value) {
                $("#LV1Value").val($("#LV1ValueRT").val() / 2);
                keyLV1ValueRT = true;
            }
        });
        var keyLV2Value = false;
        var keyLV2ValueRT = false;
        $("#LV2Value").keyup(function () {               
            if ("@Model.LV2ValueRT"=="" && !keyLV2ValueRT) {
                $("#LV2ValueRT").val($("#LV2Value").val() * 2);
                keyLV2Value = true;
            }
        });
         $("#LV2ValueRT").keyup(function () {               
            if ("@Model.LV2Value"=="" && !keyLV2Value) {
                $("#LV2Value").val($("#LV2ValueRT").val() * 2);
                keyLV2ValueRT = true;
            }
        });

    </script>
}