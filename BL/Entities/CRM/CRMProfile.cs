// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BL.Entities.CRM.CRMProfile;
//
//    var userProfile = UserProfile.FromJson(jsonString);

namespace BL.Entities.CRM.CRMProfile
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class UserProfile
    {
        [JsonProperty("data")]
        public Data Data { get; set; }

        [JsonProperty("user_setting")]
        public UserSetting UserSetting { get; set; }

        [JsonProperty("user_social_accounts")]
        public UserSocialAccount[] UserSocialAccounts { get; set; }
        
        [JsonProperty("code")]
        public string Code { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("email_verified_at")]
        public string EmailVerifiedAt { get; set; }

        [JsonProperty("referral_code")]
        public string ReferralCode { get; set; }

        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        [JsonProperty("user_profile")]
        public UserProfileClass UserProfile { get; set; }

        [JsonProperty("passport_issuing_country")]
        public Country PassportIssuingCountry { get; set; }

        [JsonProperty("passport_nationality_country")]
        public Country PassportNationalityCountry { get; set; }
    }

    public partial class Country
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("phone_code")]
        public string PhoneCode { get; set; }

        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("translations")]
        public Translations Translations { get; set; }
    }

    public partial class Translations
    {
        [JsonProperty("en")]
        public En En { get; set; }

        [JsonProperty("th")]
        public En Th { get; set; }
    }

    public partial class En
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

        [JsonProperty("country_id", NullValueHandling = NullValueHandling.Ignore)]
        public long CountryId { get; set; }

        [JsonProperty("locale")]
        public string Locale { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class UserProfileClass
    {
        [JsonProperty("user_id", NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("first_name")]
        public string FirstName { get; set; }

        [JsonProperty("middle_name")]
        public string MiddleName { get; set; }

        [JsonProperty("last_name")]
        public string LastName { get; set; }

        [JsonProperty("country_id", NullValueHandling = NullValueHandling.Ignore)]
        public long CountryId { get; set; }

        [JsonProperty("phone_code")]
        public string PhoneCode { get; set; }

        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("gender")]
        public string Gender { get; set; }

        [JsonProperty("passport_no")]
        public string PassportNo { get; set; }

        [JsonProperty("passport_expired")]
        public string PassportExpired { get; set; }

        [JsonProperty("passport_issuing_country_id", NullValueHandling = NullValueHandling.Ignore)]
        public long PassportIssuingCountryId { get; set; }

        [JsonProperty("birth_date")]
        public string BirthDate { get; set; }

        [JsonProperty("avatar")]
        public string Avatar { get; set; }

        [JsonProperty("passport_nationality_country_id", NullValueHandling = NullValueHandling.Ignore)]
        public string PassportNationalityCountryId { get; set; }

        [JsonProperty("passport_issuing_date")]
        public string PassportIssuingDate { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }
    }

    public partial class UserSetting
    {
        [JsonProperty("user_id", NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("language_id", NullValueHandling = NullValueHandling.Ignore)]
        public long LanguageId { get; set; }

        [JsonProperty("currency_id", NullValueHandling = NullValueHandling.Ignore)]
        public long CurrencyId { get; set; }

        [JsonProperty("language")]
        public Currency Language { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }
    }

    public partial class Currency
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

        [JsonProperty("alias")]
        public string Alias { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("local_name", NullValueHandling = NullValueHandling.Ignore)]
        public string LocalName { get; set; }
    }

    public partial class UserSocialAccount
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long Id { get; set; }

        [JsonProperty("user_id", NullValueHandling = NullValueHandling.Ignore)]
        public long UserId { get; set; }

        [JsonProperty("social_id", NullValueHandling = NullValueHandling.Ignore)]
        public long SocialId { get; set; }

        [JsonProperty("uid")]
        public string Uid { get; set; }

        [JsonProperty("data")]
        public string Data { get; set; }

        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        [JsonProperty("social")]
        public Currency Social { get; set; }
    }

    public partial class UserProfile
    {
        public static UserProfile FromJson(string json) => JsonConvert.DeserializeObject<UserProfile>(json, BL.Entities.CRM.CRMProfile.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UserProfile self) => JsonConvert.SerializeObject(self, BL.Entities.CRM.CRMProfile.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
