// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BL.Entities.CurrencyExchange;
//
//    var botResponse = BotResponse.FromJson(jsonString);

namespace BL.Entities.CurrencyExchange
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BotResponse
    {
        [JsonProperty("result")]
        public Result Result { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }

        [JsonProperty("api")]
        public string Api { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("data_header")]
        public DataHeader DataHeader { get; set; }

        [JsonProperty("data_detail")]
        public List<DataDetail> DataDetail { get; set; }
    }

    public partial class DataDetail
    {
        [JsonProperty("period")]
        public string Period { get; set; }

        [JsonProperty("currency_id")]
        public string CurrencyId { get; set; }

        [JsonProperty("currency_name_th")]
        public string CurrencyNameTh { get; set; }

        [JsonProperty("currency_name_eng")]
        public string CurrencyNameEng { get; set; }

        [JsonProperty("buying_sight")]
        public string BuyingSight { get; set; }

        [JsonProperty("buying_transfer")]
        public string BuyingTransfer { get; set; }

        [JsonProperty("selling")]
        public string Selling { get; set; }

        [JsonProperty("mid_rate")]
        public string MidRate { get; set; }
    }

    public partial class DataHeader
    {
        [JsonProperty("report_name_eng")]
        public string ReportNameEng { get; set; }

        [JsonProperty("report_name_th")]
        public string ReportNameTh { get; set; }

        [JsonProperty("report_uoq_name_eng")]
        public string ReportUoqNameEng { get; set; }

        [JsonProperty("report_uoq_name_th")]
        public string ReportUoqNameTh { get; set; }

        [JsonProperty("report_source_of_data")]
        public List<ReportSourceOfDatum> ReportSourceOfData { get; set; }

        [JsonProperty("report_remark")]
        public List<ReportRemark> ReportRemark { get; set; }

        [JsonProperty("last_updated")]
        public string LastUpdated { get; set; }
    }

    public partial class ReportRemark
    {
        [JsonProperty("report_remark_eng")]
        public string ReportRemarkEng { get; set; }

        [JsonProperty("report_remark_th")]
        public string ReportRemarkTh { get; set; }
    }

    public partial class ReportSourceOfDatum
    {
        [JsonProperty("source_of_data_eng")]
        public string SourceOfDataEng { get; set; }

        [JsonProperty("source_of_data_th")]
        public string SourceOfDataTh { get; set; }
    }

    public partial class BotResponse
    {
        public static BotResponse FromJson(string json) => JsonConvert.DeserializeObject<BotResponse>(json, BL.Entities.CurrencyExchange.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BotResponse self) => JsonConvert.SerializeObject(self, BL.Entities.CurrencyExchange.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
